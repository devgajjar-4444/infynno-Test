infynno: 0.1
info:
  title: Secure Task Workflow API
  description: |
    A comprehensive task management system with role-based access control, file uploads, 
    email notifications, and advanced reporting capabilities.
    
    ## Features
    - **JWT Authentication** with access and refresh tokens
    - **Role-based Access Control** (Admin, Manager, Employee)
    - **Task Management** with CRUD operations
    - **File Uploads** for task attachments (PDF, JPG, PNG)
    - **Email Simulation** with queue management
    - **Advanced Reporting** and analytics
    - **Data Export** in CSV and JSON formats
    - **Rate Limiting** for API protection
    
    ## Authentication
    This API uses JWT Bearer tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    - **Non-authenticated routes**: 10 requests per minute per IP
    - **Authenticated routes**: 100 requests per hour per user
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@taskworkflow.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.taskworkflow.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Tasks
    description: Task management operations
  - name: Reports
    description: Analytics and reporting endpoints (Admin only)
  - name: Emails
    description: Email simulation and queue management (Admin only)
  - name: Export
    description: Data export functionality (Admin only)

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              manager:
                summary: Register as Manager
                value:
                  name: "John Doe"
                  email: "john.doe@company.com"
                  password: "SecurePass123!"
                  role: 2
              employee:
                summary: Register as Employee
                value:
                  name: "Jane Smith"
                  email: "jane.smith@company.com"
                  password: "SecurePass123!"
                  role: 1
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimit'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john.doe@company.com"
              password: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimit'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current session and tokens
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Retrieve current user's profile information
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update current user's profile information
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/change-password:
    put:
      tags:
        - Authentication
      summary: Change password
      description: Change current user's password
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/users:
    get:
      tags:
        - Authentication
      summary: Get all users (Admin only)
      description: Retrieve list of all users in the system
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # ==========================================
  # TASK MANAGEMENT ENDPOINTS
  # ==========================================
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks with filtering and pagination
      description: |
        Retrieve tasks with advanced filtering, search, pagination, and sorting capabilities.
        
        **Access Control:**
        - **Employee**: Can only see tasks assigned to them
        - **Manager**: Can see all tasks they created or are assigned to
        - **Admin**: Can see all tasks in the system
      operationId: getTasks
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          description: Filter by task status
          required: false
          schema:
            $ref: '#/components/schemas/TaskStatusEnum'
        - name: priority
          in: query
          description: Filter by task priority
          required: false
          schema:
            $ref: '#/components/schemas/TaskPriorityEnum'
        - name: assignedTo
          in: query
          description: Filter by assigned user ID
          required: false
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
        - name: search
          in: query
          description: Search in task title and description
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 100
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [createdAt, dueDate, priority, status, title]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tasks:
                            type: array
                            items:
                              $ref: '#/components/schemas/Task'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Tasks
      summary: Create new task (Manager/Admin only)
      description: Create a new task and assign it to a user
      operationId: createTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - assignedTo
                - dueDate
              properties:
                title:
                  type: string
                  minLength: 5
                  maxLength: 100
                description:
                  type: string
                  minLength: 10
                  maxLength: 1000
                assignedTo:
                  type: string
                  pattern: '^[0-9a-fA-F]{24}$'
                priority:
                  $ref: '#/components/schemas/TaskPriorityEnum'
                dueDate:
                  type: string
                  format: date-time
                estimatedHours:
                  type: number
                  minimum: 0
                  maximum: 1000
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 3
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      operationId: getTaskById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update task details and status
      operationId: updateTask
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Tasks
      summary: Delete task (Manager/Admin only)
      description: Soft delete a task
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{id}/assign:
    post:
      tags:
        - Tasks
      summary: Assign task (Manager/Admin only)
      description: Assign or reassign a task to another user
      operationId: assignTask
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTaskRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{id}/comments:
    post:
      tags:
        - Tasks
      summary: Add comment to task
      description: Add a comment to a task
      operationId: addTaskComment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{id}/attachments:
    post:
      tags:
        - Tasks
      summary: Upload task attachments
      description: Upload files as task attachments (PDF, JPG, PNG only, max 3 files)
      operationId: uploadTaskAttachments
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 3
      responses:
        '201':
          description: Attachments uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          attachments:
                            type: array
                            items:
                              $ref: '#/components/schemas/Attachment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==========================================
  # REPORTS ENDPOINTS
  # ==========================================
  /reports/task-summary:
    get:
      tags:
        - Reports
      summary: Get task summary report (Admin only)
      description: Get aggregated task statistics and summary
      operationId: getTaskSummary
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for filtering
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Task summary retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TaskSummaryReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /reports/user-performance:
    get:
      tags:
        - Reports
      summary: Get user performance report (Admin only)
      description: Get user performance metrics and statistics
      operationId: getUserPerformance
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for filtering
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: User performance retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserPerformanceReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # ==========================================
  # EMAIL ENDPOINTS
  # ==========================================
  /emails/simulate-email-processing:
    post:
      tags:
        - Emails
      summary: Simulate email processing (Admin only)
      description: Simulate background email processing with queue
      operationId: simulateEmailProcessing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateEmailRequest'
      responses:
        '200':
          description: Email simulation started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /emails/process-manual:
    post:
      tags:
        - Emails
      summary: Process manual email (Admin only)
      description: Process a manual email immediately
      operationId: processManualEmail
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessManualEmailRequest'
      responses:
        '200':
          description: Email processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # ==========================================
  # EXPORT ENDPOINTS
  # ==========================================
  /export/tasks:
    get:
      tags:
        - Export
      summary: Export tasks (Admin only)
      description: Export tasks data in CSV or JSON format
      operationId: exportTasks
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
        - name: startDate
          in: query
          description: Start date for filtering
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Tasks exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /export/users:
    get:
      tags:
        - Export
      summary: Export users (Admin only)
      description: Export users data in CSV or JSON format
      operationId: exportUsers
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
      responses:
        '200':
          description: Users exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /export/reports:
    get:
      tags:
        - Export
      summary: Export task reports (Admin only)
      description: Export task reports data in CSV or JSON format
      operationId: exportTaskReports
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
        - name: startDate
          in: query
          description: Start date for filtering
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Reports exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  parameters:
    Page:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    Limit:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
        example: 10

    TaskId:
      name: id
      in: path
      description: Task ID
      required: true
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{24}$'
        example: '507f1f77bcf86cd799439011'

  schemas:
    # Enums
    UserRoleEnum:
      type: integer
      enum: [1, 2, 3]
      description: |
        User roles:
        * `1` - Employee
        * `2` - Manager  
        * `3` - Admin

    TaskStatusEnum:
      type: string
      enum: [pending, in_progress, completed, cancelled]
      description: Task status

    TaskPriorityEnum:
      type: string
      enum: [low, medium, high, urgent]
      description: Task priority level

    # Request Schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "John Doe"
          description: User's full name
        email:
          type: string
          format: email
          example: "john.doe@company.com"
          description: User's email address
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-={}[\]|:;"''<>,.?/]).{8,}$'
          example: "SecurePass123!"
          description: |
            Password must contain:
            - At least 8 characters
            - One lowercase letter
            - One uppercase letter
            - One digit
            - One special character
        role:
          $ref: '#/components/schemas/UserRoleEnum'
          default: 1

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@company.com"
        password:
          type: string
          example: "SecurePass123!"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "John Smith"
        email:
          type: string
          format: email
          example: "john.smith@company.com"

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          example: "OldPassword123!"
        newPassword:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-={}[\]|:;"''<>,.?/]).{8,}$'
          example: "NewSecurePass123!"

    CreateTaskRequest:
      type: object
      required:
        - title
        - description
        - assignedTo
        - dueDate
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
          example: "Implement user authentication"
        description:
          type: string
          minLength: 10
          maxLength: 1000
          example: "Develop JWT-based authentication system"
        assignedTo:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439011"
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
          default: medium
        dueDate:
          type: string
          format: date-time
          example: "2024-02-15T10:00:00.000Z"
        estimatedHours:
          type: number
          minimum: 0
          maximum: 1000
          example: 40
        tags:
          type: array
          items:
            type: string
            maxLength: 20
          maxItems: 10
          example: ["backend", "security"]

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
        description:
          type: string
          minLength: 10
          maxLength: 1000
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        assignedTo:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0
          maximum: 1000
        actualHours:
          type: number
          minimum: 0
          maximum: 1000
        tags:
          type: array
          items:
            type: string
            maxLength: 20
          maxItems: 10

    AssignTaskRequest:
      type: object
      required:
        - assignedTo
      properties:
        assignedTo:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439011"

    AddCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 500
          example: "Task is progressing well, will be completed by tomorrow"

    SimulateEmailRequest:
      type: object
      required:
        - emailCount
        - processingTime
      properties:
        emailCount:
          type: integer
          minimum: 1
          maximum: 100
          example: 10
          description: Number of emails to simulate
        processingTime:
          type: integer
          minimum: 1
          maximum: 300
          example: 30
          description: Processing time per email in seconds

    ProcessManualEmailRequest:
      type: object
      required:
        - to
        - subject
        - body
      properties:
        to:
          type: string
          format: email
          example: "user@company.com"
        subject:
          type: string
          maxLength: 200
          example: "Task Assignment Notification"
        body:
          type: string
          maxLength: 2000
          example: "You have been assigned a new task."

    # Response Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                tokens:
                  type: object
                  properties:
                    accessToken:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refreshToken:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expiresIn:
                      type: integer
                      example: 3600
                      description: Access token expiration time in seconds

    # Entity Schemas
    User:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@company.com"
        role:
          $ref: '#/components/schemas/UserRoleEnum'
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    Task:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        title:
          type: string
          example: "Implement user authentication"
        description:
          type: string
          example: "Develop JWT-based authentication system"
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        assignedTo:
          $ref: '#/components/schemas/UserSummary'
        createdBy:
          $ref: '#/components/schemas/UserSummary'
        dueDate:
          type: string
          format: date-time
          example: "2024-02-15T10:00:00.000Z"
        estimatedHours:
          type: number
          example: 40
        actualHours:
          type: number
          example: 25
        tags:
          type: array
          items:
            type: string
          example: ["backend", "security"]
        attachmentCount:
          type: integer
          example: 2
        commentCount:
          type: integer
          example: 5
        isDeleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T15:30:00.000Z"

    UserSummary:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@company.com"
        role:
          $ref: '#/components/schemas/UserRoleEnum'

    Comment:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        content:
          type: string
          example: "Task is progressing well"
        author:
          $ref: '#/components/schemas/UserSummary'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00.000Z"

    Attachment:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        filename:
          type: string
          example: "requirements.pdf"
        originalName:
          type: string
          example: "Project Requirements.pdf"
        mimeType:
          type: string
          example: "application/pdf"
        size:
          type: integer
          example: 1024000
          description: File size in bytes
        url:
          type: string
          example: "/uploads/tasks/507f1f77bcf86cd799439011/requirements.pdf"
        uploadedBy:
          $ref: '#/components/schemas/UserSummary'
        uploadedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00.000Z"

    TaskSummaryReport:
      type: object
      properties:
        totalTasks:
          type: integer
          example: 150
        completedTasks:
          type: integer
          example: 95
        pendingTasks:
          type: integer
          example: 35
        inProgressTasks:
          type: integer
          example: 20
        tasksByPriority:
          type: object
          properties:
            low:
              type: integer
              example: 30
            medium:
              type: integer
              example: 70
            high:
              type: integer
              example: 40
            urgent:
              type: integer
              example: 10
        tasksByStatus:
          type: object
          properties:
            pending:
              type: integer
              example: 35
            in_progress:
              type: integer
              example: 20
            completed:
              type: integer
              example: 95
            cancelled:
              type: integer
              example: 0
        averageCompletionTime:
          type: number
          example: 5.2
          description: Average completion time in days

    UserPerformanceReport:
      type: object
      properties:
        userId:
          type: string
          example: "507f1f77bcf86cd799439011"
        userName:
          type: string
          example: "John Doe"
        tasksAssigned:
          type: integer
          example: 25
        tasksCompleted:
          type: integer
          example: 20
        tasksInProgress:
          type: integer
          example: 3
        tasksPending:
          type: integer
          example: 2
        averageCompletionTime:
          type: number
          example: 4.8
          description: Average completion time in days
        onTimeCompletionRate:
          type: number
          example: 85.5
          description: Percentage of tasks completed on time
        totalHoursWorked:
          type: number
          example: 180.5

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 25
        pages:
          type: integer
          example: 3
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

  responses:
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'

    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: "email"
                        message:
                          type: string
                          example: "Email is required"
                  statusCode:
                    type: integer
                    example: 400
              timestamp:
                type: string
                format: date-time

    Unauthorized:
      description: Unauthorized - invalid or missing token
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access"
                  statusCode:
                    type: integer
                    example: 401
              timestamp:
                type: string
                format: date-time

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access forbidden"
                  statusCode:
                    type: integer
                    example: 403
              timestamp:
                type: string
                format: date-time

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource not found"
                  statusCode:
                    type: integer
                    example: 404
              timestamp:
                type: string
                format: date-time

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource already exists"
                  statusCode:
                    type: integer
                    example: 409
              timestamp:
                type: string
                format: date-time

    RateLimit:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rate limit exceeded"
                  statusCode:
                    type: integer
                    example: 429
              timestamp:
                type: string
                format: date-time
